#
name: Build in different environments
on:
  push:
    branches:
      - main
      - initial

jobs:
  main:
    strategy:
      matrix:
        os: ["ubuntu:22.04", "ubuntu:20.04"]
        platform: [linux/amd64, linux/arm/v7, linux/arm64]
    runs-on: ubuntu-22.04
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: recursive
      - name: Build in Container
        # known to fail unter ubuntu 20.04 and arm7
        if: matrix.os != 'ubuntu:20.04' || matrix.platform != 'linux/arm/v7'
        run: |
          cat << EOF > /tmp/cmd.sh
          #!/bin/sh
          set -e
          apt-get update && export DEBIAN_FRONTEND=noninteractive \
            && apt-get -y install --no-install-recommends gcc g++ git automake libtool \
            make cmake pkg-config libprotobuf-dev libprotoc-dev protobuf-compiler \
            ca-certificates

          git clone https://github.com/protobuf-c/protobuf-c.git && \
            cd protobuf-c && ./autogen.sh && ./configure && make && make install
          cd /repo
          mkdir build && cd build
          cmake ..
          cmake --build .
          cmake --install .

          # build example out of project
          cp /repo/examples/binaryiotypea/main.c /tmp
          cd /tmp
          gcc -o example main.c -lpthread -lrt -lio4edge -lprotobuf-c
          ls -l /tmp/example
          EOF

          pwd
          ls -l
          ls -l `pwd`

          chmod +x /tmp/cmd.sh
          docker run --platform ${{ matrix.platform }} -v`pwd`:/repo -v/tmp:/cmd ${{ matrix.os }} /cmd/cmd.sh
